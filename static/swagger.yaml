swagger: '2.0'
info:
  title: "Ecommerce API"
  description: "Brief description"
  version: "1.0.0"
host: "127.0.0.1:5000"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
securityDefinitions:
  bearerAuth: 
    type: apiKey
    name: Authorization
    in: header

paths:
  /customers/login:
    post: 
      tags:
        - Customer
      summary: "Login endpoint (generates a token)"
      description: "Endpoint for user authentication and token generation"
      security:
        - bearerAuth:
      parameters: 
        - in: "body"
          name: "body"
          description: "Credentials for login (email and password)"
          required: true
          schema:
            $ref: "#/definitions/LoginPayload"
      responses:
        200:
          description: "Login Successful"
          schema:
            $ref: "#/definitions/LoginResponse"
          examples:
            application/json:
              token: "adafiphwefanip3dkfapdif"
              message: "Successfully logged in"
              status: "success"

  /customers:
    get:
      tags:
        - Customer
      summary: "Retrieve a list of customer objects"
      description: "Endpoint to retrieve all customers, requires token authentication"
      security:
      responses:
        200:
          description: "Successfully retrieved all customers"
          schema:
            $ref: "#/definitions/GetCustomers"
          examples:
            application/json:
              name: "Christy"
              email: "christy@gmail.com"
              phone: "98754431"
              username: "ChristyH"
              admin: 0

    post:
      tags:
        - Customer
      summary: "Create a customer object"
      description: "Endpoint to create a customer in the e-commerce system"
      parameters:
        - in: "body"
          name: "body"
          description: "Customer object"
          required: true
          schema:
            $ref: "#/definitions/CreateCustomer"
      responses:
        200:
          description: "Customer created successfully"
          schema:
            $ref: "#/definitions/CreateCustomer"
          examples:
            application/json:
              name: "Christy"
              email: "christy@gmail.com"
              phone: "98754431"
              username: "ChristyH"
              admin: 0

  /product:
    get:
      tags:
        - Product
      summary: "Retrieve a list of product objects"
      description: "Endpoint to retrieve all products"
      security:
      responses:
        200:
          description: "Successfully retrieved all products"
          schema:
            $ref: "#/definitions/GetProducts"
          examples:
            application/json:
              id: 1
              price: 89.99
              product_name: "Cat Tower"

    post:
      tags:
        - Product
      summary: "Create a product object in our e-commerce system"
      description: "Endpoint to create a product object"
      security:
      parameters:
        - in: "body"
          name: "body"
          description: "Product object"
          required: true
          schema:
            $ref: "#/definitions/CreateProduct"
      responses:
        200:
          description: "Product created successfully"
          schema:
            $ref: "#/definitions/CreateProduct"
          examples:
            application/json:
              id: 1
              price: 89.99
              product_name: "Cat Tower"

  /orders:
    get:
      tags:
        - Order
      summary: "Retrieve a list of all orders"
      description: "Endpoint to view all orders"
      security:
      responses:
        200:
          description: "A list of orders with products"
          schema:
            $ref: '#/definitions/GetOrder'
          examples:
            application/json:
              customer_id: 2
              id: 5
              order_date: "2024-09-02"
              products:
                - id: 1
                  price: 89.99
                  product_name: "Cat Tower"
                - id: 2
                  price: 75.0
                  product_name: "Tall Lamp - 48in"

  /cart:
    post:
      tags:
        - Cart
      summary: "Add a product to the customer's cart"
      description: "Endpoint to add a product to the customer's cart"
      security:
        - bearerAuth:
      parameters:
        - in: "body"
          name: "body"
          description: "Cart object"
          required: true
          schema:
            $ref: "#/definitions/AddToCart"
      responses:
        200:
          description: "Products added to cart"
          schema:
            $ref: "#/definitions/AddToCart"
          examples:
            application/json:
              message: "Products added to cart"

    delete:
      tags:
        - Cart
      summary: "Remove a product(s) from the customer's cart"
      description: "Endpoint to remove product(s) from the customer's cart"
      security:
        - bearerAuth: 
      responses:
        200:
          description: "Product removed from cart"
          schema:
            $ref: "#/definitions/RemoveItemFromCart"
          examples:
            application/json:
              message: "Product removed from cart"

    get:
      tags:
        - Cart
      summary: "View all products in the customer's cart"
      description: "Endpoint to view all products in the customer's cart"
      security:
        - bearerAuth:
      responses:
        200:
          description: "Cart contents retrieved"
          schema:
            $ref: "#/definitions/ViewCart"
          examples:
            application/json:
              customer_id: 2
              products:
                - id: 1
                  price: 89.99
                  product_name: "Cat Tower"
                - id: 2
                  price: 75.0
                  product_name: "Tall Lamp - 48in"

  /cart/empty-cart:
    delete:
      tags:
        - Cart
      summary: "Remove all products from the customer's cart"
      description: "Endpoint to empty the customer's cart"
      security:
        - bearerAuth:
      responses:
        200:
          description: "Cart has been emptied"
          schema:
            $ref: "#/definitions/EmptyCart"
          examples:
            application/json:
              message: "Cart has been emptied"

  /cart/place-order:
    post:
      tags:
        - Cart
      summary: "Place an order with the products in the customer's cart"
      description: "Endpoint to place an order with the products in the customer's cart"
      security:
        - bearerAuth:
      responses:
        200:
          description: "Order placed successfully"
          schema:
            $ref: "#/definitions/PlaceOrder"
          examples:
            application/json:
              message: "Order placed successfully"
              order_date: "Tue, 10 Sep 2024 00:00:00 GMT"
              order_id: 13

#===================Definitions===========#

definitions:
  LoginPayload:
    type: "object"
    properties: 
      email:
        type: "string"
        description: "Email"
      password:
        type: "string"
        description: "Password"
    required:
      - email
      - password
  
  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
        description: "Authentication token on successful login"
      message: 
        type: "string"
        description: "Message indicating success or failure"
      status: 
        type: "string"
        description: "Status of operation"
    required:
      - message
      - status

  GetCustomers:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Customer's name"
      phone:
        type: "string"
        description: "Customer's phone"
      email:
        type: "string"
        description: "Customer's email"
      username:
        type: "string"
        description: "Customer's username"
      admin:
        type: "integer"
        description: "Admin permissions. 1:Yes, 0: No"

  CreateCustomer:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Customer's name"
      phone:
        type: "string"
        description: "Customer's phone"
      email:
        type: "string"
        description: "Customer email"
      password:
        type: "string"
        description: "Customer password"
      username:
        type: "string"
        description: "Customer username"
      admin:
        type: "integer"
        description: "Admin permissions"
    required:
      - name
      - phone
      - email
      - password
      - username
      - admin


  GetProducts:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Product ID"
      price:
        type: "number"
        format: "float"
        description: "Price of the product"
      product_name:
        type: "string"
        description: "Name of the product"

  CreateProduct:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Product ID"
      price:
        type: "number"
        format: "float"
        description: "Price of the product"
      product_name:
        type: "string"
        description: "Name of the product"

  GetOrder:
    type: "object"
    properties:
      customer_id:
        type: "integer"
        description: "ID of the customer"
      id:
        type: "integer"
        description: "Order ID"
      order_date:
        type: "string"
        description: "Order date"
      products:
        type: "array"
        items:
          $ref: "#/definitions/GetProducts"

  AddToCart:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Response message indicating success"

  RemoveItemFromCart:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Response message indicating item removal"

  ViewCart:
    type: "object"
    properties:
      customer_id:
        type: "integer"
        description: "ID of the customer"
      products:
        type: "array"
        items:
          $ref: "#/definitions/GetProducts"

  EmptyCart:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Response message indicating cart emptying"

  PlaceOrder:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Response message indicating order placement"
      order_date:
        type: "string"
        description: "The date the order was placed"
      order_id:
        type: "integer"
        description: "The ID of the placed order"

